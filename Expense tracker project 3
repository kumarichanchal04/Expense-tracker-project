import java.util.ArrayList;
import java.util.List;

public class User {
    private String username;
    private String password;
    private List<Expense> expenses;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
        this.expenses = new ArrayList<>();
    }

    public String getUsername() {
        return username;
    }

    public boolean checkPassword(String password) {
        return this.password.equals(password);
    }

    public void addExpense(Expense expense) {
        expenses.add(expense);
    }

    public List<Expense> getExpenses() {
        return expenses;
    }
}


import java.time.LocalDate;

public class Expense {
    private LocalDate date;
    private String category;
    private double amount;

    public Expense(LocalDate date, String category, double amount) {
        this.date = date;
        this.category = category;
        this.amount = amount;
    }

    public LocalDate getDate() {
        return date;
    }

    public String getCategory() {
        return category;
    }

    public double getAmount() {
        return amount;
    }

    @Override
    public String toString() {
        return "Date: " + date + ", Category: " + category + ", Amount: " + amount;
    }
}

import java.io.*;
import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;

public class ExpenseTracker {
    private Map<String, User> users;
    private User currentUser;

    public ExpenseTracker() {
        this.users = new HashMap<>();
    }

    public boolean registerUser(String username, String password) {
        if (users.containsKey(username)) {
            return false; // User already exists
        }
        users.put(username, new User(username, password));
        return true;
    }

    public boolean loginUser(String username, String password) {
        User user = users.get(username);
        if (user != null && user.checkPassword(password)) {
            currentUser = user;
            return true;
        }
        return false;
    }

    public void addExpense(LocalDate date, String category, double amount) {
        if (currentUser != null) {
            currentUser.addExpense(new Expense(date, category, amount));
        }
    }

    public void listExpenses() {
        if (currentUser != null) {
            List<Expense> expenses = currentUser.getExpenses();
            expenses.sort(Comparator.comparing(Expense::getDate));
            for (Expense expense : expenses) {
                System.out.println(expense);
            }
        }
    }

    public void listExpensesByCategory(String category) {
        if (currentUser != null) {
            List<Expense> filteredExpenses = currentUser.getExpenses().stream()
                .filter(e -> e.getCategory().equalsIgnoreCase(category))
                .collect(Collectors.toList());
            for (Expense expense : filteredExpenses) {
                System.out.println(expense);
            }
        }
    }

    public void calculateCategorySum() {
        if (currentUser != null) {
            Map<String, Double> categorySum = new HashMap<>();
            for (Expense expense : currentUser.getExpenses()) {
                categorySum.put(expense.getCategory(),
                    categorySum.getOrDefault(expense.getCategory(), 0.0) + expense.getAmount());
            }
            for (Map.Entry<String, Double> entry : categorySum.entrySet()) {
                System.out.println("Category: " + entry.getKey() + ", Total: " + entry.getValue());
            }
        }
    }

    public void saveData() throws IOException {
        if (currentUser != null) {
            try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(currentUser.getUsername() + ".dat"))) {
                oos.writeObject(currentUser);
            }
        }
    }

    public void loadData(String username) throws IOException, ClassNotFoundException {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(username + ".dat"))) {
            currentUser = (User) ois.readObject();
            users.put(username, currentUser);
        }
    }

    public static void main(String[] args) {
        ExpenseTracker tracker = new ExpenseTracker();
        // Sample usage
        tracker.registerUser("john_doe", "password123");
        tracker.loginUser("john_doe", "password123");
        tracker.addExpense(LocalDate.of(2023, 7, 19), "Food", 12.5);
        tracker.addExpense(LocalDate.of(2023, 7, 20), "Transport", 8.0);
        tracker.listExpenses();
        tracker.calculateCategorySum();
        try {
            tracker.saveData();
            tracker.loadData("john_doe");
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
